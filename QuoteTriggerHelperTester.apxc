@isTest (seealldata=false)
public class QuoteTriggerHelperTester {
    @testSetup static void methodName() {

Product2 Produit_1 = TestDataFactory.createProduct_QuoteTriggerHelper_1();
        Product2 Produit_2 = TestDataFactory.createProduct_QuoteTriggerHelper_2();
		Id PricebookStandard = Test.getStandardPricebookId();
		PricebookEntry PricebookEntry_1 = TestDataFactory.createPricebookEntry_QuoteTriggerHelper(PricebookStandard, Produit_1.Id);
		PricebookEntry PricebookEntry_2 = TestDataFactory.createPricebookEntry_QuoteTriggerHelper(PricebookStandard, Produit_2.Id); 
        Account Account_1 = TestDataFactory.createAccount('Test', null, null, Label.CPT_RecordTypeId_CompteClient);
		TestDataFactory.createFinancialCond(Account_1.Id);
        TestDataFactory.createContact('contactTest', Account_1.Id);
		blng__LegalEntity__c legEnt =  TestDataFactory.createLegalEntity();
        Opportunity Opportunity_1 = TestDataFactory.createOpportunity_QuoteTriggerHelper(Account_1.Id, null, Label.OPP_StageName_OpportuniteCreee, null, legEnt.Id, null, Date.today().addMonths(6));
        SBQQ__Quote__c Quote_1 = TestDataFactory.createCPQQuote_QuoteTriggerHelper(Opportunity_1.Id, true, Account_1.Id, Date.today(), Date.today().addMonths(6), 6, 'Quote', PricebookStandard);
    	SBQQ__QuoteLineGroup__c QuoteLineGroup_1 = TestDataFactory.createQuotelineGroup(Account_1.Id, Quote_1.Id, Date.today(), Date.today().addMonths(6));

        SBQQ__QuoteLine__c QuoteLine_1 = TestDataFactory.createQuoteLine_QuoteTriggerHelper(Quote_1.Id, Produit_1.Id, PricebookStandard, QuoteLineGroup_1.Id, 6, Date.today(), Date.today().addMonths(12), NULL, NULL);
        SBQQ__QuoteLine__c QuoteLine_2 = TestDataFactory.createQuoteLine_QuoteTriggerHelper(Quote_1.Id, Produit_2.Id, PricebookStandard, QuoteLineGroup_1.Id, 6, Date.today(), Date.today().addMonths(12), NULL, NULL);
		Order Order_1 = TestDataFactory.createOrder_QuoteTriggerHelper(Account_1.Id, Date.today(), Date.today().addMonths(6), Quote_1.Id, Opportunity_1.Id);
		Contract Contract_1 = TestDataFactory.createContract_QuoteTriggerHelper(Account_1.Id, Quote_1.Id, Date.today(), 6, Date.today().addMonths(8), Order_1.Id, Opportunity_1.Id);      
		SBQQ__Subscription__c Subscription_1 = TestDataFactory.createSubscription_QuoteTriggerHelper(Contract_1.Id, Produit_1.Id, QuoteLine_1.Id, Account_1.Id);         
		List<Asset> Asset_1 = TestDataFactory.createContainersWithStatus_QuoteTriggerHelper(1, 'Disponible', true, Account_1.Id, Produit_1.Id, QuoteLine_1.Id);
        

    }
    static testMethod void doInsertMissingRenewalLineGroups() {
        List<Product2> ps = [select id from Product2 order by Name];
        Id pbid = Test.getStandardPricebookId();
        Account a = [select id from Account where Name='Test'];
        Contract c = [select id, StartDate, EndDate  from Contract where AccountId = :a.id];
        SBQQ__Subscription__c s = [select id from SBQQ__Subscription__c where SBQQ__Account__c = :a.id];
        Asset asset = [select id from Asset where AccountId = :a.id];
        
        blng__LegalEntity__c legEnt = [select id from blng__LegalEntity__c limit 1];
// ********* Starting Test **********
        Test.startTest();
        
        Opportunity Opportunity_1 = TestDataFactory.createOpportunity_QuoteTriggerHelper(a.Id, null, 'Prospecting', null, legEnt.Id, c.id, Date.today().addMonths(6));
Id PricebookStandard = Test.getStandardPricebookId();
        
        SBQQ__Quote__c Quote_1 = TestDataFactory.createCPQQuote_QuoteTriggerHelper(Opportunity_1.Id, true, a.Id, Date.today(), Date.today().addMonths(6), 6, 'Renewal', PricebookStandard);
        SBQQ__QuoteLine__c QuoteLine_1 = TestDataFactory.createQuoteLine_QuoteTriggerHelper(Quote_1.Id, ps[0].Id, PricebookStandard, NULL, 6, Date.today(), Date.today().addMonths(12), s.Id, NULL);
        SBQQ__QuoteLine__c QuoteLine_2 = TestDataFactory.createQuoteLine_QuoteTriggerHelper(Quote_1.Id, ps[1].Id, PricebookStandard, NULL, 6, Date.today(), Date.today().addMonths(12), s.Id, asset.id);
        SBQQ__Quote__c q2 = [select id, SBQQ__StartDate__c, SBQQ__EndDate__c from SBQQ__Quote__c WHERE SBQQ__Type__c = 'Renewal' limit 1];
 QuoteTriggerHelper.insertMissingAmendmentRenewalLineGroupsRun = false;
        update q2;
        Test.stopTest();
}
    static testMethod void doInsertMissingAmendmentLineGroups() {
        SBQQ__Quote__c q2 = [select id, SBQQ__StartDate__c, SBQQ__EndDate__c from SBQQ__Quote__c WHERE SBQQ__Type__c != 'Amendment' limit 1];
        Test.startTest();
QuoteTriggerHelper.insertMissingAmendmentRenewalLineGroupsRun = false;
        update q2;
        Test.stopTest();
    }
}
